#include <Servo.h>    
#include <QTRSensors.h> 

Servo motor1, motor2;
const int motor1Pin = 10; //left
const int motor2Pin = 12;
  
#define KP 0.2 //experiment to determine this,slowly increase the speeds and adjust this value.
#define KD 0.5 //experiment to determine this. ( Note: Kp < Kd) 
#define M1_default_speed 180  //normal speed of the Motor1
#define M2_default_speed 180  //normal speed of the Motor2
#define M1_maksimum_speed 180 //max. speed of the Motor1
#define M2_maksimum_speed 180 //max. speed of the Motor2
//#define MIDDLE_SENSOR 2       //number of middle sensor used

#define NUM_SENSORS  6        //number of sensors used
#define TIMEOUT 2500          //waits for 2500 us for sensor outputs to go low
#define EMITTER_PIN 7         //emitterPin is the Arduino digital pin that controls whether the IR LEDs are on or off. Emitter is controlled by digital pin 2
#define DEBUG 1
 
//sensors 0 through 5 are connected to analog inputs 0 through 5, respectively
QTRSensorsRC qtrrc((unsigned char[]) {1, 2, 3, 4, 5, 6}, 
  NUM_SENSORS, TIMEOUT, EMITTER_PIN);
  
unsigned int sensorValues[NUM_SENSORS];
  
void setup(){  
  motor1.attach(motor1Pin);
  motor2.attach(motor2Pin);
  set_motors(90,90); // set the motors not moving
  delay(1500);
  manual_calibration();
}
  
int lastError = 0;
int last_proportional = 0;
int integral = 0;
  
  
// put the car at a dead end , it will make a u-turn and then follow line.
void loop(){ 
  // first put the car at a dead end, and then it can make U-turn and then follow straight line
  for (int i=0; i<22500;i++){
    motor1.write(0);
    motor2.write(0);
  }
  set_motors(90, 90);
  delay(500);
  
  // follow line again, use a infinite loop instread of loop(), that's probably the problem
  while(1){
  PID_linefollower(); 
  } 
}


void PID_linefollower(){
// put all of the line following code in a subfunction for convinience
  int position = qtrrc.readLine(sensorValues); 
 
  int error = -2500 + position;
    
  int motorSpeed = KP * error + KD * (error - lastError);
   
  lastError = error;
    
  int leftMotorSpeed = 180 - (M1_default_speed + motorSpeed); // closer to 0, speed up
  int rightMotorSpeed = M2_default_speed - motorSpeed; // closer to 180, speed up, so slow down here
        
  // set motor speeds using the two motor speed variables above
  // limit their speed to 90~180
   Serial.print(1111);
   set_motors(leftMotorSpeed, rightMotorSpeed);
   Serial.print(2222);
  }


  
void set_motors(int motor1speed, int motor2speed){
  if (180 - motor1speed >= M1_maksimum_speed ) motor1speed = 180 - M1_maksimum_speed;  // if speed is negative, use 0 instrad
  if (motor2speed >= M2_maksimum_speed ) motor2speed = M2_maksimum_speed;
  if ( motor1speed >= 90) motor1speed = 90;   // avoid spinning backward
  if (motor2speed <= 90) motor2speed = 90;
  motor1.write(motor1speed); 
  motor2.write(motor2speed);
}
 

void manual_calibration() {
  //calibrate for sometime by sliding the sensors across the line,
  //or you may use auto-calibration instead
  pinMode(2, OUTPUT);
  digitalWrite(2, LOW);
  delay(500);
  
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);    // turn on Arduino's LED to indicate we are in calibration mode
  //void emittersOn();
  for (int i = 0; i < 400; i++)  // make the calibration take about 10 seconds
  {
    qtrrc.calibrate();       // reads all sensors 10 times at 2500 us per read (i.e. ~25 ms per call)
  }
  digitalWrite(13, LOW);     // turn off Arduino's LED to indicate we are through with calibration

  // print the calibration minimum values measured when emitters were on
  Serial.begin(9600);
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtrrc.calibratedMinimumOn[i]);
    Serial.print(' ');
  }
  Serial.println();

  // print the calibration maximum values measured when emitters were on
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtrrc.calibratedMaximumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
  Serial.println();
  delay(1000);
}
